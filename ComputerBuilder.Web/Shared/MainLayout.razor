@inherits LayoutComponentBase
@using ComputerBuilder.DataModels.CustomModels;
@using ComputerBuilder.Web.Services;
@inject IUserPanelService userPanelService
@inject ProtectedSessionStorage sessionStorage;
@inject NavigationManager navManager;


<style>
    .mainlayout{
        max-width: 1000px;
        margin: auto;
        background: white;
        padding: 10px;
        background-color: rgba(255,255,255,0.13);
        backdrop-filter: blur(10px);
        box-shadow: 0 0 40px rgba(8,7,16,0.6);
    }

    *{
        box-sizing: border-box;
    }

    .header {
        color: black;
        padding: 5px;
        border: 1px groove #808080;
        border-radius: 14px;
        background: linear-gradient(30deg, #000000,#756213,#FFBD33 );
        background-size: 400% 400%;
    }

    .footer {
        color: white;
        padding: 5px;
        border: 1px groove #808080;
        border-radius: 7px;
        background: linear-gradient(30deg, #000000,#756213,#FFBD33 );
        background-size: 400% 400%;
    }

    .col-container {
        display: table;
        width: 100%;
        border-radius: 25px;
    }

    .col {
       
        display: table-cell;
        padding: 16px;
    }

    .divleft {
        float: left;
        color: #fe9900;
    }

    .divright {
        float: right;
        color: #fe9900;
    }
</style>

<div class="mainlayout">

    <div style="padding-bottom:25px;">
          <div class="divleft" style="padding-right: 15px;">
            <NavLink href="/"style="color:#fe9900">
                    Home
                </NavLink>
          </div>
          <div class="divleft">
              @if (IsUserLoggedIn)
             {
                 <i class="fa fa-user"></i><span>Welcome, @LoggedInUserName</span>
             }
             else
             {
                <i class="fa fa-user"></i><span>Welcome,</span>
             }
          </div>
          <div class="divright">
              @if (IsUserLoggedIn)
              {
                  <div style="padding-left:15px;">
                      <i class="fa fa-sign-out"></i> <a @onclick="@Logout" href="#">Logout</a>
                  </div>
              }
          </div>
        <div class="divright" style="padding-left:15px;">
            @if (IsUserLoggedIn)
            {
                <NavLink href="myaccount" style="color:#fe9900">
                    MyAccount
                </NavLink>
            }
        </div>
        <div class="divright" style="padding-left:15px;" >
            @if (!IsUserLoggedIn)
            {
                <NavLink href="login" style="color:black">
                    Login
                </NavLink>
            }
        </div>
        <div class="divright" style="padding-left:15px;">
            @if (!IsUserLoggedIn)
            {
                <NavLink href="register" style="color:black">
                    Register
                </NavLink>
            }
        </div>
    </div>

    <div class="header">
        <div class="col-conntainer">
            <div class="col" style="border-radius: 25px;">
               <NavLink href="/">
                   <img src="images/Logo.png" style="cursor:pointer;"/>
               </NavLink>
            </div>
        <div class="col">
            <a href="mycart">
                <i class="fa fa-shopping-cart" style="font-size:48px;color:black">
                    <span style="font-size:35px;vertical-align:top;padding:7px;color:black;border-radius:50%;padding-top:10px;font-weight:bold;"><sup>@cartCount</sup></span>
                </i>
            </a>
        </div>
        </div>

    </div>
        <div>
            <CascadingValue Value="event_notify">
                @Body
            </CascadingValue>
        </div>
    <div class="footer">
        &copy; 2022 - Computer Builder
    </div>
</div>

@code{

    public int cartCount = 0;
    public int layoutState = 0;
    public bool IsUserLoggedIn = false;
    public string LoggedInUserName = "User";
    public List<CartModel> myCart { get; set; }

    EventCallback event_notify => EventCallback.Factory.Create(this, NotifyLayout);

    private async Task NotifyLayout()
    {
        IsUserLoggedIn = await userPanelService.IsUserLoggedIn();

        {
            var userNameSession = await sessionStorage.GetAsync<string>("userName");
            LoggedInUserName = userNameSession.Value;

            var checkoutSession = await sessionStorage.GetAsync<string>("checkoutAlert");
            if (checkoutSession.Success)
            {
                await sessionStorage.DeleteAsync("checkoutAlert");
                navManager.NavigateTo("/mycart");
            }

            StateHasChanged();
            layoutState++;
        }

        if (layoutState == -1)
        {
            StateHasChanged();
        }

        var result = await sessionStorage.GetAsync<List<CartModel>>("myCart");

        if (result.Success)
        {
            myCart = result.Value;
            cartCount = myCart.Count;
            await sessionStorage.DeleteAsync("updateCartFlag");
            StateHasChanged();
        }
        else
        {
            cartCount = 0;
        }
    }

    private async void Logout()
    {
        await sessionStorage.DeleteAsync("userKey");
        await sessionStorage.DeleteAsync("userName");
        await sessionStorage.DeleteAsync("userEmail");
        await NotifyLayout();
        navManager.NavigateTo("/");
        layoutState = -1;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await NotifyLayout();
        }
    }
}