@page "/products"
@using ComputerBuilder.DataModels.CustomModels;
@using ComputerBuilder.Admin.Services;
@inject IAdminPanelService adminPanelService;
@using System.IO;

<style>

    #btn {
        background: #ff9900;
        color: black;
    }

    .modal {
        position: fixed;
        z-index: 1;
        padding-top: 100px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        background-color: rgb(0,0,0);
        background-color: rgba(0,0,0,0.4);
        display: block;
    }

    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #8888;
        width: 50%;
        overflow: hidden;
    }

    .close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .close:hover, 
    .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }
    body{
        background: linear-gradient(90deg, #000000,#756213 );
    
    }

    #form {
        background-color: rgba(255,255,255,0.13);
        backdrop-filter: blur(10px);
        box-shadow: 0 0 40px rgba(8,7,16,0.6);
        color:whitesmoke;
    }

</style>


@if (productModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <body>
    <div class="card" id="form">
        <h4 class="card-header">Product</h4>
        <div class="card-body">
            <EditForm Model="@productModel" OnValidSubmit="SaveProduct">
                <DataAnnotationsValidator/>
                <div class="form-row">
                    <div class="form-group col-3">
                        <label>Name :</label>
                        <InputText @bind-Value="productModel.Name" class="form-control"/>
                        <ValidationMessage For="@(() => productModel.Name)"/>
                    </div>
                        &emsp;
                    <div class="form-group" col-3>
                        <label>Price :</label>
                        <InputNumber @bind-Value="productModel.Price" class="form-control"/>
                        <ValidationMessage For="@(() => productModel.Price)"/>
                    </div>
                        &emsp;
                    <div class="form-group" col-3>
                        <label>Stock :</label>
                        
                            <InputNumber @bind-Value="productModel.Stock" class="form-control" /> 
                        <ValidationMessage For="@(() => productModel.Stock)"/>
                        </div>  &emsp;
                    <div class="form-group col-3">
                        <label>Select Category :</label>
                        @if (categoryList != null)
                        {
                            <select class="form-control" @onchange="@CategoryClicked">
                                <option value="">--Select--</option>
                                @foreach (var cat in categoryList)
                                {
                                    <option value="@cat.Id">@cat.Name</option>
                                }
                            </select>
                        }
                        <ValidationMessage For="@(() => productModel.CategoryId)"/>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-3">
                        <label>Select Photo :</label>
                        <label style="border:1px ridge #808080;">
                            <InputFile OnChange="@OnInputFileChange" multiple/>
                        </label>
                        <ValidationMessage For="@(() => productModel.FileName)" />

                        <table style="border:1px ridge #808080;">
                            <tr>
                                @foreach (var imgsrc in imageUrls)
                                {
                                    <td>
                                        <img src="@imgsrc">
                                    </td>
                                }
                            </tr>
                        </table>
                    </div>
                </div>
                <div class="text-left">
                        <input type="submit" class="btn btn-primary" value="Save" id="btn" />
                        <input type="submit" class="btn btn-primary" value="Clear" @onclick="ClearForm" id="btn" />
                </div>
            </EditForm>
        </div>
        <div class="card-body">
            @if (productList == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                    <table class="table table-striped table-bordered bg-light">
                    <thead>
                            <tr style="background:black; color:#ff9900">
                            <th style="width:15px;">Sr.No</th>
                            <th>Name</th>
                            <th>Price</th>
                            <th>Stock</th>
                            <th>Category</th>
                           @* <th style="width:80px;">Edit?</th>*@
                            <th style="width:80px;">Delete?</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var (index, prod) in productList.Select((prod, i) => (i + 1, prod)))
                        {
                            <tr>
                                <td>@index</td>
                                <td>@prod.Name</td>
                                <td>@prod.Price</td>
                                <td>@prod.Stock</td>
                                <td>@prod.CategoryName</td>
                               @* <td><input type="button" class="btn btn-primary" value="Edit" @onclick="(() => EditButtonClick(prod))" id="btn"/></td>*@
                                <td><input type="button" class="btn btn-primary" value="Delete" @onclick="(() => DeleteButtonClick(prod))" id="btn" /></td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
    </body>
}

@if (showDeletePopup == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Delete Product</h5>
                <span class="close" @onclick="ToggleDeletePopup">&times;</span>
            </div>
            <div class="modal-body">
                Are You Sure you want to Delete <span style="background-color:yellow;">@productToDelete.Name ?</span>
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Yes" @onclick="DeleteProduct" id="btn" />
                <input type="button" class="btn btn-primary" value="No" @onclick="ToggleDeletePopup" id="btn" />
            </div>
        </div>
    </div>
}

@if (successPopup == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                Alert <span class="close" @onclick="ToggleSuccessPopup" id="btn">&times;</span>
            </div>
            <div class="modal-body">
                @Message
            </div>
            <div class="modal-footer">
                <input type="button" class="btn-primary" value="Close" @onclick="ToggleSuccessPopup" id="btn" />
            </div>
        </div>
    </div>
}
@*@if (showEditPopup == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Edit Product</h5>
                <span class="close" @onclick="ToggleEditPopup">&times;</span>
            </div>
            <div class="modal-body">
                <EditForm Model="@productToUpdate" OnValidSubmit="UpdateProduct">
                    <DataAnnotationsValidator />
                    <div class="form-row">
                        <div class="form-group col-5">
                            <label>Name :</label>
                            <InputText @bind-Value="productToUpdate.Name" class="form-control" />
                            <ValidationMessage For="@(() => productToUpdate.Name)" />
                           
                        </div>
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <Input type="button" class="btn btn-primary" value="Update" @onclick="UpdateProduct" />
                <Input type="button" class="btn btn-primary" value="Cancel" @onclick="ToggleEditPopup" />
            </div>
        </div>
    </div>
}*@

@code{
    [CascadingParameter]
    public EventCallback notify { get; set; }
    public List<CategoryModel> categoryList { get; set; }
    public ProductModel productModel { get; set; }
    public List<ProductModel> productList { get; set; }
    public int categoryId { get; set;  }
    IReadOnlyList<IBrowserFile> selectedFiles;
    List<string> imageUrls = new List<string>();
    public ProductModel productToUpdate { get; set; }
    public ProductModel productToDelete { get; set; }
    public bool showEditPopup = false;
    public bool showDeletePopup = false;
    public bool successPopup = false;
    string Message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        productModel = new ProductModel();
        await GetCategories();
        await GetProducts();
    }

    private async Task GetCategories()
    {
        categoryList = await adminPanelService.GetCategories();
    }
    private async Task GetProducts()
    {
        productList = await adminPanelService.GetProducts();
    }

    private async Task SaveProduct()
    {
        Stream stream = selectedFiles.FirstOrDefault().OpenReadStream();
        MemoryStream ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        stream.Close();

        productModel.CategoryId = categoryId;
        productModel.FileName = selectedFiles.FirstOrDefault().Name;
        productModel.FileContent = ms.ToArray();
        ms.Close();

        await adminPanelService.SaveProduct(productModel);
        await GetProducts();
        ClearForm();
    }

    private async Task DeleteProduct()
    {
        productToDelete.FileName ="demofile";
        bool flag = await adminPanelService.DeleteProduct(productToDelete);
        ToggleDeletePopup();
        if (flag)
        {
            Message = "Product Deleted Successfully !!";
        }
        else
        {
            Message = "Product Not Deleted Try Again !!";
        }

        ToggleSuccessPopup();
        productToDelete = new ProductModel();
        await GetProducts();
    }

    //private async Task UpdateProduct()
    //{
    //    bool flag = await adminPanelService.UpdateProduct(productToUpdate);
    //    ToggleEditPopup();
    //    if (flag)
    //    {
    //        Message = "Category Updated Successfully !!";
    //    }
    //    else
    //    {
    //        Message = "Category Not Updated Try Again !!";
    //    }

    //    ToggleSuccessPopup();
    //    productToUpdate = new ProductModel();
    //    await GetProducts();
    //}

    private void DeleteButtonClick(ProductModel _productToDelete)
    {
        productToDelete = _productToDelete;
        ToggleDeletePopup();
    }
    //private void EditButtonClick(ProductModel _productToUpdate)
    //{
    //    _productToUpdate = _productToUpdate;
    //    ToggleEditPopup();
    //}
    private void ToggleDeletePopup()
    {
        showDeletePopup = showDeletePopup == true ? false : true;
    }
    private void ToggleEditPopup()
    {
        showEditPopup = showEditPopup == true ? false : true;
    }

    private void ToggleSuccessPopup()
    {
        successPopup = successPopup == true ? false : true;
    }

    private void ClearForm()
    {
        productModel = new ProductModel();
        imageUrls = new List<string>();
    }

    private void CategoryClicked(ChangeEventArgs categoryEvent)
    {
        if (!string.IsNullOrEmpty(Convert.ToString(categoryEvent.Value)))
        {
            categoryId = Convert.ToInt32(categoryEvent.Value);
            productModel.CategoryId = categoryId;
            this.StateHasChanged();
        }
        
    }
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        productModel.FileName = string.Empty;
        foreach (var imageFile in selectedFiles)
        {
            var resizedImage = await imageFile.RequestImageFileAsync("image/jpg", 100, 100);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imgData = $"data:image/jpg;base64,{Convert.ToBase64String(buffer)}";
            imageUrls.Add(imgData);
            productModel.FileName = imgData;
        }

        Message = $"{selectedFiles.Count} file(s) selected";
        this.StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();
        }
    }
}
